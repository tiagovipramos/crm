const mysql = require('mysql2/promise');

async function corrigirCotacoesFantasma() {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'protecar_crm'
  });

  console.log('');
  console.log('================================================');
  console.log('üîß CORRIGINDO COTA√á√ïES FANTASMA');
  console.log('================================================');
  console.log('');

  try {
    // Buscar indicador Jo√£o
    const [indicadores] = await connection.execute(
      "SELECT id, nome FROM indicadores WHERE nome LIKE '%jo√£o%' OR nome LIKE '%Jo√£o%'"
    );

    if (indicadores.length === 0) {
      console.log('‚ùå Indicador Jo√£o n√£o encontrado');
      return;
    }

    const indicador = indicadores[0];
    console.log(`üë§ Indicador: ${indicador.nome}`);
    console.log('');

    // Buscar indica√ß√µes "respondeu" com leads que N√ÉO est√£o em "proposta_enviada"
    const [indicacoesErradas] = await connection.execute(
      `SELECT 
        ind.id as indicacao_id,
        ind.nome_indicado,
        ind.status as indicacao_status,
        l.id as lead_id,
        l.status as lead_status
       FROM indicacoes ind
       LEFT JOIN leads l ON ind.lead_id = l.id
       WHERE ind.indicador_id = ?
         AND ind.status = 'respondeu'
         AND l.status != 'proposta_enviada'`,
      [indicador.id]
    );

    console.log(`üìä Encontradas ${indicacoesErradas.length} cota√ß√µes fantasma`);
    console.log('');

    if (indicacoesErradas.length === 0) {
      console.log('‚úÖ Nenhuma corre√ß√£o necess√°ria!');
      return;
    }

    console.log('üìã Detalhes:');
    indicacoesErradas.forEach((row, index) => {
      console.log(`   ${index + 1}. ${row.nome_indicado}`);
      console.log(`      Indica√ß√£o: ${row.indicacao_status}`);
      console.log(`      Lead: ${row.lead_status}`);
      console.log('');
    });

    console.log('üîÑ Corrigindo status das indica√ß√µes...');
    console.log('');

    // Corrigir cada indica√ß√£o
    for (const row of indicacoesErradas) {
      // Determinar novo status baseado no status do lead
      let novoStatus = 'enviado_crm';
      
      console.log(`   ‚úì ${row.nome_indicado}: "respondeu" ‚Üí "${novoStatus}"`);

      // Atualizar status da indica√ß√£o
      await connection.execute(
        'UPDATE indicacoes SET status = ?, data_resposta = NULL WHERE id = ?',
        [novoStatus, row.indicacao_id]
      );
    }

    console.log('');
    console.log('‚úÖ Status das indica√ß√µes corrigidos!');
    console.log('');

    // Agora recalcular saldos do indicador
    console.log('üí∞ Recalculando saldos...');
    console.log('');

    // Buscar todas as indica√ß√µes do indicador
    const [todasIndicacoes] = await connection.execute(
      'SELECT status, comissao_resposta, comissao_venda FROM indicacoes WHERE indicador_id = ?',
      [indicador.id]
    );

    let saldoBloqueado = 0;
    let saldoDisponivel = 0;
    let saldoPerdido = 0;
    let indicacoesRespondidas = 0;
    let indicacoesConvertidas = 0;

    todasIndicacoes.forEach(ind => {
      const comissaoResposta = parseFloat(ind.comissao_resposta || 2.00);
      const comissaoVenda = parseFloat(ind.comissao_venda || 20.00);

      switch (ind.status) {
        case 'pendente':
        case 'enviado_crm':
          saldoBloqueado += comissaoResposta;
          break;
        case 'respondeu':
          saldoDisponivel += comissaoResposta;
          indicacoesRespondidas++;
          break;
        case 'converteu':
          saldoDisponivel += comissaoResposta + comissaoVenda;
          indicacoesRespondidas++;
          indicacoesConvertidas++;
          break;
        case 'perdido':
        case 'engano':
          saldoPerdido += comissaoResposta;
          break;
      }
    });

    console.log('üìä NOVOS SALDOS:');
    console.log(`   üí∞ Dispon√≠vel: R$ ${saldoDisponivel.toFixed(2)}`);
    console.log(`   üîí Bloqueado: R$ ${saldoBloqueado.toFixed(2)}`);
    console.log(`   ‚ùå Perdido: R$ ${saldoPerdido.toFixed(2)}`);
    console.log(`   üìà Indica√ß√µes respondidas: ${indicacoesRespondidas}`);
    console.log(`   üéØ Indica√ß√µes convertidas: ${indicacoesConvertidas}`);
    console.log('');

    // Atualizar saldos no banco
    await connection.execute(
      `UPDATE indicadores 
       SET saldo_disponivel = ?,
           saldo_bloqueado = ?,
           saldo_perdido = ?,
           indicacoes_respondidas = ?,
           indicacoes_convertidas = ?
       WHERE id = ?`,
      [saldoDisponivel, saldoBloqueado, saldoPerdido, indicacoesRespondidas, indicacoesConvertidas, indicador.id]
    );

    console.log('‚úÖ Saldos atualizados!');
    console.log('');

    // Registrar transa√ß√£o
    await connection.execute(
      `INSERT INTO transacoes_indicador (
        indicador_id, tipo, valor, saldo_anterior, saldo_novo, descricao
      ) VALUES (?, 'correcao', 0, 0, 0, ?)`,
      [indicador.id, 'üîß CORRE√á√ÉO - Cota√ß√µes fantasma removidas, status sincronizado']
    );

    console.log('================================================');
    console.log('‚úÖ CORRE√á√ÉO CONCLU√çDA!');
    console.log('================================================');
    console.log('');
    console.log(`üìä ${indicacoesErradas.length} cota√ß√µes fantasma corrigidas`);
    console.log('üí∞ Saldos recalculados e atualizados');
    console.log('');
    console.log('üí° PR√ìXIMOS PASSOS:');
    console.log('   1. Recarregue o app de indica√ß√£o (Ctrl+Shift+R)');
    console.log('   2. Os valores agora devem estar corretos!');
    console.log('');

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await connection.end();
  }
}

corrigirCotacoesFantasma().catch(console.error);
